# Code review automation
# https://github.com/danger/danger
#
# Policy:
# 1. Use `warn` for all things that are important, but not related to code.
#   So it will be possible to fix these issues without creating new commits
# 2. Use `failure` for all things that are important and are related to code.
#   So people will have to create new commits to address these issues.
# 3. Use `sticky: true` for things that
#   show attempts for potentially risky behaviour:
#   like secrets or config modification, too big submissions, etc.
# 4. Place `failure`s after all `warn` rules
#   to collect maximum amount of issues in a code review comment

# HIGHLIGHT WITH A CLICKABLE LINK IF IMPORTANT FILES ARE CHANGED.
important_files = [
  ".gitlab-ci.yml",
  ".gitignore",
  "mix.exs",

  # Infrastructure:
  "infrastructure/ci/Dangerfile",
  "infrastructure/ci/dependabot/generic-update-script.rb"
]

important_files.each do |item|
  warn "#{gitlab.html_link(item)} was edited.", sticky: true if
    git.modified_files.include? item
end

# CODE CHANGES MUST ALSO BRING TEST CHANGES.
has_app_changes = !git.modified_files.grep(/lib/).empty?
tests_updated = !git.modified_files.grep(/test/).empty?
if has_app_changes && !tests_updated
  warn("The library files were changed, but the tests remained unmodified.
  Consider updating or adding to the tests to match the library changes.")
end

# ENSURE THERE IS A SUMMARY FOR A MR.
warn "Please provide a summary in the MR description, at least 50 chars" if
  gitlab.mr_body.length < 50

# ENSURE THAT EACH MERGE REQUEST CLOSES AT LEAST ONE ISSUE.
warn "MR does not close any issues. Should close at least one" unless
  gitlab.mr_title.index /closes #\d+/i

# MAKE SURE THAT BRANCH WILL BE REMOVED.
warn "Please make sure to auto-remove source branch" unless
  gitlab.mr_json["should_remove_source_branch"]

# MAKE SURE THAT MR COMMITS WILL BE SQUASHED.
warn "Please make sure to squash commits" if
  not gitlab.mr_json["squash"] and git.commits.length > 1

# MAKE SURE THAT MR CAN BE MERGED VIA UI.
warn "This MR cannot be merged, you will need to rebase it or assign Kira" if
  gitlab.mr_json["merge_status"] != "can_be_merged"

# MAKE SURE THAT MR HAS TIME TRACKING ATTACHED.
warn "This MR does not have time tracking, please attach your stats" if
  gitlab.mr_json["time_stats"]["time_estimate"] == 0

# MAKE SURE THAT WE TRACK ALL NEW TODOS.
todoist.message = "Consider creating task chains out of new todos in the code"
todoist.warn_for_todos
todoist.print_todos_table

# ========
# Critical
# Comes after warnings to collect maximum number of messages

# FAIL CI WHEN AN MR IS NOT CLASSIFIED AS WORK IN PROGRESS.
failure(
  "MR is not classified as Work in Progress.
  So why is it running inside the CI?
  See our policy about working with MRs.",
  sticky: true
) unless gitlab.mr_json["work_in_progress"]

# ONLY ACCEPT MRS TO THE MASTER BRANCH.
failure "Please re-submit this MR to master branch. This one can be closed" if
  gitlab.branch_for_merge != "master"

# FAIL REALLY BIG DIFFS.
failure "We cannot handle the scale of this MR, split it", sticky: true if
  git.lines_of_code > 3000

# TODO: enforce commit style, rework and add Kira Release Bot
# https://github.com/vuejs/vue/blob/dev/.github/COMMIT_CONVENTION.md
# https://github.com/conventional-changelog/standard-version/issues/313
# /^(revert: )?(feat|fix|docs|refactor|test|chore)(\(.+\))?: .{1,50} refs #\d+/

# FAIL WHEN GIT HAS MERGE COMMITS.
if git.commits.any? { |c| c.message =~ /^Merge branch/ }
  failure "Please rebase to get rid of the merge commits in this MR"
end
